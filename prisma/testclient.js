import { PrismaClient, UserPodType } from '@prisma/client';

const prisma = new PrismaClient();
// use `prisma` in your application to read and write data in your DB

// create an asynchronous main  function
async function main() {
	// connect to the database using Prisma connect() method
	// await prisma.$connect();

	// await prisma.user.create({
	// 	data: {
	// 		username: 'hankdog',
	// 		password: '1234',
	// 		isVerified: true
	// 	}
	// });

	// await prisma.user.create({
	// 	data: {
	// 		username: 'jdawg',
	// 		password: '1234',
	// 		isVerified: true
	// 	}
	// });
	// await prisma.user.create({
	// 	data: {
	// 		username: 'test',
	// 		password: '1234',
	// 		isVerified: true
	// 	}
	// });

	await prisma.pod
		.create({
			data: {
				name: "hank's pod",
				description: 'welcome to my pod',
				userPods: {
					create: {
						users: {
							connect: {
								username: 'hankdog'
							}
						},
						type: UserPodType.STANDARD
					}
				}
			}
		})
		.then(() => {
			console.log('pod created');
		});

	// await prisma.userPod.create({
	// 	data: {
	// 		users: {
	// 			connect: {
	// 				username: 'hankdog'
	// 			}
	// 		}
	// 	}
	// });

	// using the Prisma create() method, add data based on the model fields
	// Note: other fields as autogenerated, and no need to specify them here

	// you can find the added fields using findMany() method
	const pods = await prisma.pod.findMany({
		include: {
			userPods: {
				include: {
					users: true
				}
			}
		}
	});

	// log these added fields to the console
	console.dir(pods, {
		depth: Infinity
	});
}

main()
	// catch any erroes
	.catch((err) => {
		console.error('HERE IS THE ERROR YOU RETARDS');
		console.error(err);
	})
	// disconnect the prisma client once all processes are executed
	.finally(() => {
		console.log('closing prisma');
		prisma.$disconnect();
	});
